#!/usr/bin/env ruby

require 'bundler'
Bundler.require(:demo_test_run)

require 'capybara'
require 'capybara/poltergeist'
require 'capybara/rspec'
require 'rest_client'
require 'spectre_client'
require 'rmagick'

def print_usage
  puts "Usage: bin/demo_test_run <url> (<fail>)\ne.g. bin/demo_test_run http://localhost:3000\n     or\n     bin/demo_test_run http://localhost:3000 fail"
  exit 1
end

def setup_poltergeist
  Capybara.register_driver :poltergeist do |app|
    Capybara::Poltergeist::Driver.new(app, {
      js_errors: false,
      timeout: 30,
      debug: true
    })
  end

  Capybara.configure do |config|
    config.default_driver = :poltergeist
    config.run_server = false
    config.default_max_wait_time = 5
  end

  Capybara.reset_sessions!
end

def draw_on_screenshot
  image = Magick::Image.read('homepage.png').first
  x = rand(0..image.columns)
  y = rand(0..image.rows)
  gc = Magick::Draw.new
  gc.stroke = 'white'
  gc.fill = 'white'
  gc.rectangle x, y, 10, 10
  gc.draw(image)
  image.write 'homepage.png'
end

print_usage unless ARGV[0]

url = ARGV[0]

class DemoTestRuns
  include Capybara::DSL

  def initialize(url)
    @url = url
  end

  # gets some screens from nuffield health
  def demo_run_with_screenshots
    spectre = SpectreClient::Client.new('Nuffield', 'Templates', @url)
    puts "Created Spectre run"
    sleep(2)

    setup_poltergeist

    home_options = {
      name: 'URL - Meme Fullsize',
      browser: 'Phantom',
      size: 650,
      screenshot: "http://www.freepngimg.com/download/internet_meme/1-2-forever-alone-meme-png.png",
      highlight_colour: '00ff00'
    }
    spectre.submit_test(home_options)

    puts "Submitting #{home_options[:screenshot]}"

    Capybara.reset_sessions!

    home_options = {
      name: 'URL - Meme Cropped',
      browser: 'Phantom',
      size: 650,
      screenshot: "http://www.freepngimg.com/download/internet_meme/1-2-forever-alone-meme-png.png",
      crop_area: "325x650+325+0",
      highlight_colour: '00ff00'
    }
    spectre.submit_test(home_options)

    puts "Submitting #{home_options[:screenshot]}"

    Capybara.reset_sessions!
    
    visit "http://www.nuffieldhealth.com/gyms/"
    sleep(2)
    screenshot_file = 'gyms.png'
    page.save_screenshot(screenshot_file)
    puts "Saved screenshot #{screenshot_file}"

    gym_options = {
      name: 'File - Gyms Screenshot',
      browser: 'Phantom',
      size: 1024,
      screenshot: File.new(screenshot_file, 'rb')
    }
    spectre.submit_test(gym_options)
    puts "Submitting #{screenshot_file}"
    File.delete(screenshot_file)

    Capybara.reset_sessions!

  end
end

if ARGV[1] && ARGV[1] == "fail"
  DemoTestRuns.new(url).demo_run_with_failing_test
else
  DemoTestRuns.new(url).demo_run_with_screenshots
end
